from math import exp, pi, sqrt

import numpy as np
from scipy import interpolate


def GeometricProgressionQ(L, n, hmin, epsilon=0.001):
    """Функция определяет коэффициент геометрической прогрессии q при заданных:
    L - толщине (м),
    n - числе шагов по толщине,
    hmin - минимальный шаг по толщине (м),
    epsilon - относительной погрешности разбиения от толщины"""

    # Проверяем корректность данных
    if L <= 0 or n <= 0 or hmin <= 0 or epsilon <= 0:
        return
    if hmin >= L:
        return

    # Первое приближение
    q = 1

    # Коэфф b0
    b0 = hmin

    # Сумма элементов
    Summa = b0 * n

    # Расчитываем коэффициент
    if L != Summa:
        # Расчётная длина больше реальной длины
        if L < Summa:
            qL = 0
            qR = 1
        # Наоборот
        else:
            qR = 2
            Summa = b0 * (qR ** n - 1) / (qR - 1)
            while L > Summa:
                qR = qR + 1
                Summa = b0 * (qR ** n - 1) / (qR - 1)
            qL = qR - 1
        # Метод половинного деления для подбора коэффициента
        q = (qL + qR) / 2
        Summa = b0 * (q ** n - 1) / (q - 1)
        while abs(1 - Summa / L) > epsilon:
            if L < Summa:
                qR = q
            else:
                qL = q
            q = (qL + qR) / 2
            Summa = b0 * (q ** n - 1) / (q - 1)
    return q


def ValueFunc(Crono, CronoList, ValueList):
    """Функция возвращает значение от времени, используя сплайн
    Crono - время в секундах
    CronoList - список значений времени в с
    ValueList - список значений
    """
    # Коэффициенты кубического сплайна
    koeffCubic = interpolate.splrep(CronoList, ValueList, s=0)
    # Получаем значение
    value = interpolate.splev(Crono, koeffCubic, der=0)
    # Возвращаем значение
    return value


def UvrezChuev(p0):
    """Функция расчитывает приращение температуры в гр. К от врезания ведущего пояска в нарезы по методу Чуева
    p0 - давление форсирования в МПа"""
    return 28 * p0 + 273.15


def SupUvrezChuev(p0):
    """Функция расчитывает приращение температуры от врезания ведущего пояска в нарезы по методу Чуева
    p0 - давление форсирования в МПа"""
    return 28 * (p0 - 30)


def UmediumChuev(T0, p0, d, omega, flag='k'):
    """Функция рассчитывает среднюю температуру поверхности канала ствола
    в начале ведущей части по методу Чуева

    T0 - температура горения пороха в градусах Кельвина
    p0 - давление форсирования в МПа
    d - калибр в мм
    omega - масса заряда в кг
    flag - флаг, показывающий возвращать температуру в градусах Кельвинах или Цельсия
    """
    # Приращение температуры от врезания
    Tv = SupUvrezChuev(p0)
    # Переводим в градусы Цельсия
    Tp = T0 - 273.15
    # Переводим калибр в дм
    dDm = d * 1e-2
    # Расчёт температуры
    Umedium = Tv + (Tp - Tv) / (1.7 + 4.1 * dDm ** 2.22 / omega ** 0.86)
    # Возвращем температуру в градусах Кельвинах или Цельсия
    if flag == 'k':
        return Umedium + 273.15
    elif flag == 'c':
        return Umedium
    else:
        raise ValueError(
            'Вернуть температуру можно только в градусах Кельвинах (flag == "k") или Цельсия (flag == "c")')


def Lambda(temperatura):
    """Функция возвращает Теплопроводность стали Вт/(м*К)
    в зависимости от температуры в К
    апроксимация прямой (Сталь 40ХН2МА аналог ОХН2М)"""
    return 44.402 - 0.015 * temperatura


def CFunc(temperatura):
    """Функция возвращает теплоемкость стали Дж/(кг*К)
    в зависимости от температуры в К
    апроксимация экспонентой(Сталь 40ХН2МА аналог ОХН2М)"""
    return 24.816 * exp(2.11e-3 * temperatura) + 436.904


def AlphaPG(p, u, v, d, t, n, Tgor, f, Kovolum, Teta, Pr=0.74, R=8.3144621):
    """Коэффициент теплоотдачи для пороховых газов от давления, температуры, скорости
    p - давление, Па
    u - температура, °К
    v - скорость, м/с
    d - калибр, м
    t - глубина нарезов, м
    n - число нарезов
    Tgor - температура горения пороха, °К
    f - сила пороха, Дж/кг
    Kovolum - коволюм, м3/кг
    Teta - показатель адиабаты пороховых газов минус 1
    Pr - число Прандтля
    R - универсальная газовая постоянная"""
    # Газовая постоянная
    Rg = f / Tgor
    # Плотность газа
    RoGaz = 1 / ((Rg * u / p) + Kovolum)
    # Коэффициент динамической вязкости
    Mu = 7e-5 * (u / 2500) ** 0.7
    # Коэффициент кинематической вязкости
    Ipsilon = Mu / RoGaz
    # Критерий Рейнольдса
    Re = v * d / Ipsilon
    # Критерий Нуссельта
    Nu = 0.023 * Re ** 0.8 * Pr ** 0.4
    # Молярная масса
    M = R * Tgor / f
    # Изохорная теплоемкость на моль
    Cv = R / Teta
    # Изохорная теплоемкость на кг
    Cvkg = Cv / M
    # Коэффициент теплопроводности пороховых газов
    LambdaG = Cvkg * Mu
    # Поправочный коэффициент на лучистый теплообмен [Орлов, 1976]
    Kr = 1.2
    # Поправочный коэффициент на нарезы ствола (увеличение площади теплообмена)
    Kn = (pi * d + 2 * n * t) / (pi * d)
    # Коэффициент теплоотдачи
    AlphaG = Kr * Kn * Nu * LambdaG / d
    return AlphaG


def TeploTube(total_time, N_t, dr, r, Un, Ug, Uv, thermal_conductivity, specific_heat_capacity, AlphaInt, AlphaExt,
              rho):
    """Расчёт нагрева трубы от врезания ведущего пояска:

        total_time - время процесса (с),

        N_t - число шагов по времени,

        dr - список шагов по толщине (м),

        r - список радиусов (м),

        Un - начальная температура в точках (список или функция от толщины, °К)

        Ug - функция внутренней температуры газа от времени

        Uv - температура наружная (температура воздуха)

        thermal_conductivity - функция коэффициента теплопроводности материала трубы Вт/(м*°К),

        specific_heat_capacity - функция - теплоемкость от температуры Дж/(кг*К)

        AlphaInt - функция коэффициента теплоотдачи газы от времени на внутренней поверхности

        AlphaExt - коэффициент теплоотдачи газа на наружной поверхности

        rho - плотность материала кг/м3"""

    # Расчет параметров сетки
    dt = total_time / N_t  # шаг по времени

    u = [Un]

    # Временной цикл
    for n in range(1, N_t):
        u.append([None for i in range(len(r))])

        # Обновление теплопроводности, теплоемкости и температуропроводности для каждого узла
        k_values = np.array([thermal_conductivity(temp) for temp in u[n - 1]])
        c_p_values = np.array([specific_heat_capacity(temp) for temp in u[n - 1]])
        alpha_values = k_values / (rho * c_p_values)

        # Внутренний узел (граничное условие 3-го рода)
        u[n][0] = u[n - 1][0] + alpha_values[0] * dt / dr[0] ** 2 * (
                2 * dr[0] * AlphaInt(dt * n) / k_values[0] * (Ug(n * dt) - u[n - 1][0]) + 2 * (
                    u[n - 1][1] - u[n - 1][0])
        )

        # Внутренние узлы
        for i in range(1, len(dr)):
            # Проверка условия устойчивости (с использованием базового k и c_p)
            k_base = thermal_conductivity(u[n - 1][i])
            c_p_base = specific_heat_capacity(u[n - 1][i])
            alpha_base = k_base / (rho * c_p_base)
            if alpha_base * dt / dr[i] ** 2 > 0.5:
                raise ValueError("Нарушено условие устойчивости: уменьшите dt или увеличьте dr")

            u[n][i] = u[n - 1][i] + alpha_values[i] * dt / dr[i] ** 2 * (
                    u[n - 1][i - 1] - 2 * u[n - 1][i] + u[n - 1][i + 1]
            ) + alpha_values[i] * dt / (2 * r[i] * dr[i]) * (u[n - 1][i + 1] - u[n - 1][i - 1])

        # Внешний узел (граничное условие 3-го рода)
        u[n][-1] = u[n - 1][-1] + alpha_values[-1] * dt / dr[-1] ** 2 * (
                2 * dr[-1] * AlphaExt / k_values[-1] * (Uv - u[n - 1][-1]) + 2 * (u[n - 1][-2] - u[n - 1][-1])
        )

    return u


def TeploTube2(T, K, h, r, Un, Ug, Uv, Lambda, CFunc, AlphaInt, AlphaExt, Ro):
    """Расчёт нагрева/охлаждения трубы при переменной теплооттдаче газа внутри:
    T - время процесса (с),
    K - число шагов по времени,
    h - список шагов по толщине (м),
    r - список радиусов (м),
    Un - начальная температура в точках (список или функция от толщины, °К)
    Ug - функция внутренней температуры газа от времени
    Uv - температура наружная температура воздуха
    Lambda - функция коэффициента теплопроводности материала трубы Вт/(м*°К),
    CFunc - функция - теплоемкость от температуры Дж/(кг*К)
    AlphaInt - функция коэффициента теплоотдачи газы от времени на внутренней поверхности,
    AlphaExt - коэффициент теплоотдачи газа на наружной поверхности
    Ro - плотность материала кг/м3"""

    # Проверка данных
    if len(h) + 1 != len(r) != len(Un):
        return

    # Количество узлов по толщине
    N = len(r)

    # Число шагов по толщине
    n = N - 1

    # Шаг по времени
    Delta = T / K

    # Узлы по времени
    t = [0 + i * Delta for i in range(K + 1)]

    # Передаем начальную температуру
    U = [Un]

    # Расчёт
    for i in range(1, K):
        # Создаем пустую строку температур
        U.append([None for i in range(N)])
        # Создаем строки прогоночных коэффициентов
        Alpha = [None for j in range(n)]
        Beta = [None for j in range(n)]
        # Прогоночные коэффициенты для первого узла
        Alpha[0] = Lambda(U[i - 1][0]) / (Lambda(U[i - 1][0]) + h[0] * AlphaInt(t[i]))
        Beta[0] = h[0] * AlphaInt(t[i]) * Ug(t[i]) / (Lambda(U[i - 1][0]) + h[0] * AlphaInt(t[i]))
        # Прогоночные коэффициенты для других точек
        for j in range(1, n):
            AJ = (Lambda(U[i - 1][j + 1]) + Lambda(U[i - 1][j])) / h[j] / (h[j] + h[j - 1]) + Lambda(U[i - 1][j]) / r[
                j] / (h[j] + h[j - 1])
            CJ = (Lambda(U[i - 1][j]) + Lambda(U[i - 1][j - 1])) / h[j - 1] / (h[j] + h[j - 1]) - Lambda(U[i - 1][j]) / \
                 r[j] / (h[j] + h[j - 1])
            BJ = CFunc(U[i - 1][j]) * Ro / Delta + (Lambda(U[i - 1][j + 1]) + Lambda(U[i - 1][j])) / h[j] / (
                        h[j] + h[j - 1]) + (Lambda(U[i - 1][j]) + Lambda(U[i - 1][j - 1])) / h[j - 1] / (
                             h[j] + h[j - 1])
            FJ = -CFunc(U[i - 1][j]) * Ro * U[i - 1][j] / Delta
            Alpha[j] = AJ / (BJ - CJ * Alpha[j - 1])
            Beta[j] = (CJ * Beta[j - 1] - FJ) / (BJ - CJ * Alpha[j - 1])
        # Температура на наружной поверхности цилиндра
        U[i][n] = (Lambda(U[i - 1][n]) * Beta[n - 1] + h[n - 1] * AlphaExt * Uv) / (
                    h[n - 1] * AlphaExt + Lambda(U[i - 1][n]) * (1 - Alpha[n - 1]))
        # Температура в других точках
        for j in range(n - 1, -1, -1):
            U[i][j] = Alpha[j] * U[i][j + 1] + Beta[j]
    # Возвращаем значение
    return U


def TeploTubeVP(T, K, h, r, Un, Uvrez, Uv, Lambda, CFunc, AlphaExt, Ro):
    """Расчёт нагрева трубы от врезания ведущего пояска:

    T - время процесса (с),

    K - число шагов по времени,

    h - список шагов по толщине (м),

    r - список радиусов (м),

    Un - начальная температура в точках (список или функция от толщины, °К)

    Uvrez - температура врезания

    Uv - температура наружная (температура воздуха)

    Lambda - функция коэффициента теплопроводности материала трубы Вт/(м*°К),

    CFunc - функция - теплоемкость от температуры Дж/(кг*К)

    AlphaExt - коэффициент теплоотдачи газа на наружной поверхности

    Ro - плотность материала кг/м3"""

    # Проверка данных
    if len(h) + 1 != len(r) != len(Un):
        return

    # Количество узлов по толщине
    N = len(r)

    # Число шагов по толщине
    n = N - 1

    # Шаг по времени
    Delta = T / K

    # Передаем начальную температуру
    U = [Un]

    # Расчёт
    for i in range(1, K):
        # Создаем пустую строку температур
        U.append([None for i in range(N)])
        # Создаем строки прогоночных коэффициентов
        Alpha = [None for j in range(n)]
        Beta = [None for j in range(n)]
        # Прогоночные коэффициенты для первого узла
        Alpha[0] = 0
        Beta[0] = Uvrez
        # Прогоночные коэффициенты для других точек
        for j in range(1, n):
            AJ = (Lambda(U[i - 1][j + 1]) + Lambda(U[i - 1][j])) / h[j] / (h[j] + h[j - 1]) + Lambda(U[i - 1][j]) / r[
                j] / (h[j] + h[j - 1])

            CJ = (Lambda(U[i - 1][j]) + Lambda(U[i - 1][j - 1])) / h[j - 1] / (h[j] + h[j - 1]) - Lambda(U[i - 1][j]) / \
                 r[j] / (h[j] + h[j - 1])

            BJ = CFunc(U[i - 1][j]) * Ro / Delta + (Lambda(U[i - 1][j + 1]) + Lambda(U[i - 1][j])) / h[j] / (
                        h[j] + h[j - 1]) + (Lambda(U[i - 1][j]) + Lambda(U[i - 1][j - 1])) / h[j - 1] / (
                             h[j] + h[j - 1])

            FJ = -CFunc(U[i - 1][j]) * Ro * U[i - 1][j] / Delta

            Alpha[j] = AJ / (BJ - CJ * Alpha[j - 1])

            Beta[j] = (CJ * Beta[j - 1] - FJ) / (BJ - CJ * Alpha[j - 1])

        # Температура на наружной поверхности цилиндра
        U[i][n] = (Lambda(U[i - 1][n]) * Beta[n - 1] + h[n - 1] * AlphaExt * Uv) / (
                    h[n - 1] * AlphaExt + Lambda(U[i - 1][n]) * (1 - Alpha[n - 1]))

        # Температура в других точках
        for j in range(n - 1, -1, -1):
            U[i][j] = Alpha[j] * U[i][j + 1] + Beta[j]
    # Возвращаем значение
    return U


def ThermalStateEgorov(Regim, d, Dnar, Ddul, Lkam, Lsech, Lsn, W0, Nnar, Anar, Tnar, Hvp, p0, Tgor, f, Kovolum, Teta,
                       Omega, Fi1, Qsn, CronoArr, PballArr, LsnArr, VsnArr, UgArr, Uv=288.15, AlphaInt=9, AlphaExt=9,
                       Ro=7850, Nh=50, hmin=1e-7, Kvp=50, Kosn=50, Kposl=50, Kpausa=50, Kpereryv=50, UkritVn=673.15,
                       UkritNr=633.15):
    """Функция рассчитывает :
    - среднюю температуру поверхности канала ствола в начале ведущей для требуемого режима огня
    - число очередей
    - число выстрелов
    - температуры перед каждым выстрелом внутренней и наружной поверхностей для начала нарезов и дульного среза
      (общий уровень нагрева)
    Параметры:
    Regim - Огневой режим, пример: Regim = [{'Тип': 'Очередь', 'Выстрелов': 60, 'Темп': 30}, {'Тип': 'Перерыв', 'Время': 60}, {'Тип': 'Очередь', 'Выстрелов': 60, 'Темп': 30}]
    d - калибр, м
    Dnar - наружный диаметр (полная глубина нарезов), м
    Ddul - Наружный диаметр (дульный срез), м
    Lkam - Длина каморы, м
    Lsech - Положение расчётного сечения (полная глубина нарезов) от казённого среза, м
    Lsn - Путь снаряда по каналу ствола, м
    W0 - Начальный объём каморы, м3
    Nnar - Число нарезов
    Anar - Ширина нареза, м
    Tnar - Глубина нарезов, м
    Hvp - Ширина ведущего пояска, м
    p0 - Давление форсирования, МПа
    Tgor - Температура горения, гр. К
    f - Сила пороха, Дж/кг
    Kovolum - Коволюм, м3/кг (Около 0,001 м3/кг)
    Teta - Показатель адиабаты пороховых газов минус 1 (Например, 0,24)
    Omega - Масса заряда, кг
    Fi1 - Коэффициент Слухотцкого
    Qsn - Масса снаряда, кг
    CronoArr - Список временных точек в с
    PballArr - Список точек среднебаллистического давления в МПа
    LsnArr - Список точек пути снаряда в м
    VsnArr - Список точек скорости снаряда в м/с
    UgArr - Список точек температуры пороховых газов в гр.К
    Uv - Температура воздуха, гр. К (288.15 гр.К равно 15 гр.С)
    AlphaInt - Коэффициент теплоотдачи на внутренней поверхности ствола. Сталь - неподвижный воздух = 9 Вт/(м2*К)
    AlphaExt - Коэффициент теплоотдачи на наружной поверхности ствола. Сталь - неподвижный воздух = 9 Вт/(м2*К)
    Ro - Плотность материала, кг/м3 (Сталь - 7850)
    Nh - Число узлов по толщине
    hmin - Минимальный шаг по толщине стенки, м
    Kvp - Число шагов по времени при нагреве от врезания ВП
    Kosn - Число шагов по времени в основном периоде
    Kposl - Число шагов по времени в периоде последействия
    Kpausa - Число шагов по времени в периоде охлаждения
    Kpereryv - Число шагов по времени в перерыве
    UkritVn - Предельный уровень общего нагрева внутренней поверхности,  673.15 К (400 гр С)
    UkritNr - Предельный уровень общего нагрева наружной поверхности,  633.15 К (360 гр С)"""

    # **********************************************

    # Геометрические параметры

    # **********************************************

    # Длина ствола, м
    Lstvol = Lkam + Lsn

    Skn = pi * d ** 2 / 4 + Nnar * Anar * Tnar  # Площадь канала

    # Радиус канала
    R0 = (d + 2 * Tnar) / 2

    # Толщина стенки - полная глубина нарезов
    HstFnar = Dnar / 2 - R0

    # Толщина стенки - дульный срез
    HstDul = Ddul / 2 - R0

    # Объём канала в м3
    Wkn = W0 + Skn * Lsn

    # **********************************************

    # Внутрибаллистические параметры

    # **********************************************

    # Баллистическое давление в Па
    PballArrPa = [i * 1e6 for i in PballArr]

    def UgFunc(Crono):
        """Температура пороховых газов от времени
        Crono - время в секундах"""
        return ValueFunc(Crono, CronoArr, UgArr)

    def VsnFunc(Crono):
        """Скорость снаряда от времени
        Crono - время в секундах"""
        return ValueFunc(Crono, CronoArr, VsnArr)

    def LsnFunc(Crono):
        """Путь снаряда от времени
        Crono - время в секундах"""
        return ValueFunc(Crono, CronoArr, LsnArr)

    def PballFunc(Crono):
        """Давление пороховых газов от времени
        Crono - время в секундах"""
        return ValueFunc(Crono, CronoArr, PballArrPa)

    # **********************************************

    # Разбиение стенки на узлы по геометрической зависимости

    # **********************************************

    # Число шагов по толщине
    n = Nh - 1

    # Расчёт q
    q = GeometricProgressionQ(HstFnar, n, hmin)

    # Шаги по толщине - начало нарезов
    h = [hmin * q ** i for i in range(n)]

    # Формируем список радиусов - начало нарезов
    r = [R0]

    for i in range(1, Nh):
        r.append(r[i - 1] + h[i - 1])

    # Расчёт q
    q = GeometricProgressionQ(HstDul, n, hmin)

    # Шаги по толщине - дульный срез
    hDul = [hmin * q ** i for i in range(n)]

    # Формируем список радиусов - дульный срез
    rDul = [R0]

    for i in range(1, Nh):
        rDul.append(rDul[i - 1] + hDul[i - 1])

    # **********************************************

    # Расчёт температуры при врезании ВП

    # **********************************************

    Uvrez = UvrezChuev(p0)
    #    print('Температура врезания, гр. К', Uvrez)

    # Расчёт времени взаимодействия с ВП

    Th = 1e-6  # Шаг по времени

    # Начало процесса
    Tstart = 0
    Lrasch = 0
    while Lsech > Lrasch:
        # Прибавляем шаг
        Tstart += Th
        # Получаем расстояние от казенного среза
        Lrasch = Lkam + LsnFunc(Tstart)

    Vvp = VsnFunc(Tstart)  # Скорость в момент прохождения пояска

    Tvp = Hvp / Vvp  # Время прохождения пояска

    #    #Начальная темература
    #    UnVP = [Uv for i in range(n + 1)]

    #    #Таблица температур в период форсирования
    #    TableUvp = TeploTubeVP(Tvp, Kvp, h, r, UnVP, Uvrez, Uv, Lambda, CFunc, AlphaExt, Ro)

    # **********************************************

    # Расчёт параметров потока ПГ в начале нарезов

    # **********************************************

    # Завершение процесса
    Tfinish = CronoArr[-1]

    # Время процесса
    Tosn = Tfinish - Tstart

    def UgOsn(Crono):
        """Температура газа сдвинутая на время начала процесса"""
        return UgFunc(Crono + Tstart)

    def Vosn(Crono):
        """Скорость газа в сечении"""
        # Рассчитываем значение
        value = VsnFunc(Crono + Tstart) * Lsech / (Lkam + LsnFunc(Crono + Tstart))
        # Возвращаем значение
        return value

    def Posn(Crono):
        """Давление в сечении"""
        # Рассчитываем значение
        value = PballFunc(Crono + Tstart) * (1 + Omega / Fi1 / Qsn / 2) / (1 + Omega / Fi1 / Qsn / 3) + Lsech * (
                    PballFunc(Crono + Tstart) / (1 + Omega / Fi1 / Qsn / 3) - PballFunc(Crono + Tstart) * (
                        1 + Omega / Fi1 / Qsn / 2) / (1 + Omega / Fi1 / Qsn / 3)) / (Lkam + LsnFunc(Crono + Tstart))
        # Возвращаем значение
        return value

    def AlphaIntOsn(Crono):
        """Коэффициент теплоотдачи от времени в периоде нагрева от пороховых газов"""
        return AlphaPG(Posn(Crono), UgOsn(Crono), Vosn(Crono), d=d, t=Tnar, n=Nnar, Tgor=Tgor, f=f, Kovolum=Kovolum,
                       Teta=Teta)

    #    #Начальная темература
    #    UnOsn = TableUvp[-1]
    #    #Таблица температур в основном периоде
    #    TableUosn = TeploTube(Tosn, Kosn, h, r, UnOsn, UgOsn, Uv, Lambda, CFunc, AlphaIntOsn, AlphaExt, Ro)
    #    print(TableUosn[-1])

    # **********************************************

    # Расчёт параметров потока ПГ в периоде последействия на дульном срезе

    # **********************************************

    # Давление в канце внутрибаллстического процесса
    Pd = PballArrPa[-1]

    # Давление при котором заканчивается пириод последействия, Па
    Pf = 0.18e6

    # Температура в конце внутрибаллстического процесса
    Ud = UgArr[-1]

    # Плотность пороховых газов в конце  внутрибаллстического процесса
    Gamma_d = Omega / Wkn

    # Коэффициент GG
    GG = Skn * (2 / (2 + Teta)) ** (1 / Teta) * sqrt(2 * (1 + Teta) * Gamma_d / (2 + Teta) / Pd ** (1 / (1 + Teta)))

    # Коэффициент B
    B = GG * Teta * Pd ** ((2 + Teta) / 2 / (1 + Teta)) / 2 / Omega

    # Время периода последействия
    Tposl = ((Pd / Pf) ** (Teta / 2 / (1 + Teta)) - 1) / B

    def PposlMedium(Crono):
        """Зависимость среднего давления (Па) в периоде последействия от времени"""
        value = Pd / (1 + B * Crono) ** (2 * (1 + Teta) / Teta)
        return value

    def UgPosl(Crono):
        """Зависимость температуры (К) в периоде последействия от времени"""
        p = PposlMedium(Crono)
        value = Ud * (p / Pd) ** (Teta / (1 + Teta))
        return value

    def PposlDul(p):
        """Зависимость дульного давления (Па) в периоде последействия от среднего давления"""
        value = (2 / (2 + Teta)) ** ((1 + Teta) / Teta) * p
        return value

    def VposlDul(p):
        """Зависимость скорости газа в критическом сечении (на дульном срезе) (м/с) в периоде последействия от давления"""
        value = sqrt(2 * (1 + Teta) * Pd / (2 + Teta) / Gamma_d) * (p / Pd) ** (Teta / 2 / (1 + Teta))
        return value

    def AlphaIntPoslDul(Crono):
        """Коэффициент теплоотдачи от времени в периоде последействия"""
        p = PposlMedium(Crono)
        return AlphaPG(PposlDul(p), UgPosl(Crono), VposlDul(p), d=d, t=Tnar, n=Nnar, Tgor=Tgor, f=f, Kovolum=Kovolum,
                       Teta=Teta)

    # Начальная темература
    UnDul = [Uv for i in range(n + 1)]
    UnNnar = [Uv for i in range(n + 1)]

    # **********************************************

    # Расчёт параметров потока ПГ в периоде последействия в начале нарезов

    # **********************************************

    def PposlNnar(Crono, f=f, Tgor=Tgor):
        """Зависимость давления в сечении (Па) в периоде последействия
        Crono - время
        f - сила пороха, Дж/кг
        Tgor - Температура горения пороха, гр. К
        """
        # Cреднеебаллистическое давление в периоде последействия
        p = PposlMedium(Crono)
        # Газовая постоянная
        Rg = f / Tgor
        # Плотность газа
        Gamma = 1 / ((Rg * UgPosl(Crono) / PposlMedium(Crono)) + Kovolum)
        # Давление в сечении
        value = PposlDul(p) + Gamma * VposlDul(p) ** 2 * (1 - Lsech ** 2 / Lstvol ** 2) / 2
        return value

    def VposlNnar(p):
        """Скорость газа в сечении в период последействия"""
        # Рассчитываем значение
        value = VposlDul(p) * Lsech / Lstvol
        # Возвращаем значение
        return value

    def AlphaIntPoslNnar(Crono):
        """Коэффициент теплоотдачи от времени в периоде последействия"""
        p = PposlMedium(Crono)
        return AlphaPG(PposlNnar(Crono), UgPosl(Crono), VposlNnar(p), d=d, t=Tnar, n=Nnar, Tgor=Tgor, f=f,
                       Kovolum=Kovolum, Teta=Teta)

    # **********************************************

    # Параметры паузы между выстрелами

    # **********************************************

    def UgPausa(Crono):
        """Внутренняя температура от времени в перерывах между выстрелами"""
        return Uv

    def AlphaIntPausa(Crono):
        """Коэффициент теплоотдачи внутри ствола в перерывах между выстрелами"""
        return AlphaInt

    # **********************************************

    # Очередь

    # **********************************************

    # Первый выстрел - начальное значение
    Nvst = 0

    # Число очередей - начальное значение
    Noch = 0

    # Флаг перегрева
    flag = False

    # Сумма для расчёта средней за время выстрела температуры поверхностного слоя
    SumUmediumOsn = 0

    UrNagreva = "Перед выстрелом №\tВнутренняя (нарезы полн. гл)\tНаружная (нарезы полн. гл)\tВнутренняя (дул. срез)\tНаружная (дул. срез)\n\r"

    # Счёт
    for Etap in Regim:
        if Etap['Тип'] == 'Очередь':
            # Длина очереди
            Ochered = Etap['Выстрелов']
            # Темп стрельбы выстр/мин
            Temp = Etap['Темп']
            # Расчёт временных интервалов
            Tcycl = 60 / Temp  # Время цикла
            # Начало нарезов (калиберной части)
            if Tcycl > (Tposl + Tosn):
                TpausaNnar = Tcycl - Tposl - Tosn  # Время паузы
                TposlNnar = Tposl  # Время периода последействи
            else:
                # Проверка
                if Tcycl < Tosn:
                    raise ValueError('Время цикла меньше времени внутрибаллистического процесса')
                TpausaNnar = 0  # Время паузы
                TposlNnar = Tcycl - Tosn  # Время периода последействи
            # Дульный срез
            if Tcycl > Tposl:
                TpausaDul = Tcycl - Tposl  # Время паузы
                TposlDul = Tposl  # Время периода последействи
            else:
                TpausaDul = 0  # Время паузы
                TposlDul = Tcycl  # Время периода последействи

            # Очередь
            for i in range(1, Ochered + 1):
                # Температура канала (дульный срез) к след. выстрелу
                UvnNnar = UnNnar[0]
                # Температура наружная (дульный срез) к след. выстрелу
                UnrNnar = UnNnar[-1]
                # Температура канала (дульный срез) к след. выстрелу
                UvnDul = UnDul[0]
                # Температура наружная (дульный срез) к след. выстрелу
                UnrDul = UnDul[-1]
                # Добавляем данные об уровне нагрева к след. выстрелу, С
                UrNagreva += '{}\t{}\t{}\t{}\t{}\n'.format(Nvst + 1, UvnNnar - 273.15, UnrNnar - 273.15,
                                                           UvnDul - 273.15, UnrDul - 273.15)
                # Перегрелось начало нарезов
                if (UvnNnar > UkritVn) or (UnrNnar > UkritNr):
                    flag = True
                    UrNagreva += 'ПЕРЕГРЕВ - полная глубина нарезов'
                # Перегрелся дульный срез
                if (UvnDul > UkritVn) or (UnrDul > UkritNr):
                    flag = True
                    UrNagreva += 'ПЕРЕГРЕВ - дульный срез'
                if flag == True:
                    break

                # Таблица температур в период форсирования - начало нарезов
                TableUforceNnar = TeploTubeVP(Tvp, Kvp, h, r, UnNnar, Uvrez, Uv, Lambda, CFunc, AlphaExt, Ro)
                # Начальная темература в основном периоде - начало нарезов
                UnOsnNnar = TableUforceNnar[-1]
                # Таблица температур в основном периоде - начало нарезов
                TableUosnNnar = TeploTube(Tosn, Kosn, h, r, UnOsnNnar, UgOsn, Uv, Lambda, CFunc, AlphaIntOsn, AlphaExt,
                                          Ro)
                # Средняя за время выстрела температура поверхностного слоя
                Umedium = sum([stroka[0] for stroka in TableUosnNnar]) / Kosn
                #                print('\tНачало нарезов','Средняя температура поверхности за время основного периода, гр. С', Umedium)
                SumUmediumOsn += Umedium
                # Начальная темература в периоде последействия - начало нарезов
                UnPoslNnar = TableUosnNnar[-1]
                # Таблица температур в периоде последействия - начало нарезов
                TableUposlNnar = TeploTube(TposlNnar, Kposl, h, r, UnPoslNnar, UgPosl, Uv, Lambda, CFunc,
                                           AlphaIntPoslNnar, AlphaExt, Ro)
                # Начальная температура - начало нарезов
                UnNnar = TableUposlNnar[-1]
                # Таблица температур в период последействия - дульный срез
                TableUposlDul = TeploTube(TposlDul, Kposl, hDul, rDul, UnDul, UgPosl, Uv, Lambda, CFunc,
                                          AlphaIntPoslDul, AlphaExt, Ro)
                # Начальная температура - дульный срез
                UnDul = TableUposlDul[-1]
                # Таблица температур в паузе - начало нарезов
                if TpausaNnar > 0:
                    TableUpausaNnar = TeploTube(TpausaNnar, Kpausa, h, r, UnNnar, UgPausa, Uv, Lambda, CFunc,
                                                AlphaIntPausa, AlphaExt, Ro)
                    # Начальная температура
                    UnNnar = TableUpausaNnar[-1]
                # Таблица температур в паузе - дульный срез
                if TpausaDul > 0:
                    TableUpausaDul = TeploTube(TpausaDul, Kpausa, hDul, rDul, UnDul, UgPausa, Uv, Lambda, CFunc,
                                               AlphaIntPausa, AlphaExt, Ro)
                    # Начальная температура
                    UnDul = TableUpausaDul[-1]
                Nvst += 1
            Noch += 1
        else:
            UrNagreva += ('ПЕРЕРЫВ\n')
            Tpereryv = Etap['Время']
            # Начало нарезов
            TableUpereryvNnar = TeploTube(Tpereryv, Kpereryv, h, r, UnNnar, UgPausa, Uv, Lambda, CFunc, AlphaIntPausa,
                                          AlphaExt, Ro)
            # Начальная температура
            UnNnar = TableUpereryvNnar[-1]
            # Дульный срез
            TableUpereryvDul = TeploTube(Tpereryv, Kpereryv, hDul, rDul, UnDul, UgPausa, Uv, Lambda, CFunc,
                                         AlphaIntPausa, AlphaExt, Ro)
            # Начальная температура
            UnDul = TableUpereryvDul[-1]

    # Средняя за время выстрела температура поверхностного слоя для огневого режима
    UmediumOsn = SumUmediumOsn / Nvst

    return UmediumOsn, Noch, Nvst, UrNagreva


def start(Regim):

    # **********************************************

    # Параметры алгоритма

    # **********************************************

    # Охлаждени жидкостью на наружной поверхности
    AlphaExt = 400

    Nh = 10  # Число узлов по толщине
    hmin = 0.001  # Минимальный шаг по толщине стенки, м
    Kvp = 1000  # Число шагов по времени при нагреве от ВП
    Kosn = 1000  # Число шагов по времени в основном периоде
    Kposl = 1000  # Число шагов по времени в периоде последействия
    Kpausa = 5000  # Число шагов по времени в периоде охлаждения
    Kpereryv = 5000  # Число шагов и время перерыва

    # **********************************************

    # Геометрические параметры

    # **********************************************

    d = 0.155  # Калибр

    Dnar = 0.190  # Наружный диаметр (полная глубина нарезов), м

    Ddul = 0.180  # Наружный диаметр (дульный срез), м

    # hmin = (Dnar - Ddul) / Nh  # Минимальный шаг по толщине стенки, м

    Lsech = 0.600  # Положение расчётного сечения (полная глубина нарезов) от казённого среза, м

    Lkam = 0.570  # Длина каморы, м

    Lsn = 6.05  # Путь снаряда по каналу ствола, м

    # Начальный объём каморы, м3
    W0 = 6.6e-3

    Hvp = 0.015  # Ширина ведущего пояска в м

    Anar = 0.007  # Ширина нареза, м

    Nnar = 48  # Число нарезов

    Tnar = 0.0025  # Глубина нарезов

    # **********************************************

    # Внутрибаллистические параметры

    # **********************************************

    p0 = 40  # Давление форсирования, МПа

    Tgor = 3000  # Температура горения, гр. К

    f = 1.2e6  # сила пороха, Дж/кг

    Kovolum = 0.0011  # Коволюм, м3/кг

    Teta = 0.25  # Показатель адиабаты пороховых газов минус 1

    # Масса заряда, кг
    Omega = 7.5

    # Коэффициент Слухотцкого
    Fi1 = 1.1

    # Масса снаряда, кг
    Qsn = 43.5

    # Время в мс
    CronoArr = [0, 0.235, 0.471, 0.707, 0.943, 1.179, 1.415, 1.651, 1.887, 2.123, 2.359, 2.595, 2.831, 3.067, 3.303,
                3.539, 3.775, 4.011, 4.247, 4.483, 4.719, 4.955, 5.191, 5.427, 5.663, 5.899, 6.135, 6.37, 6.606, 6.842,
                7.078, 7.314, 7.55, 7.786, 8.022, 8.258, 8.494, 8.73, 8.966, 9.202, 9.439, 9.675, 9.911, 10.147]

    # Время в с
    CronoArr = [i * 1e-3 for i in CronoArr]

    # Баллистическое давление в МПа
    PballArr = [4.0, 23.25, 28.29, 34.42, 41.82, 50.67, 61.14, 73.4, 87.53, 103.52, 121.22, 140.31, 160.28, 180.47,
                200.07, 218.29, 234.35, 247.69, 257.94, 264.98, 268.93, 270.07, 268.78, 260.03, 241.95, 222.67, 204.01,
                186.49, 170.36, 155.7, 142.49, 130.63, 120.02, 110.57, 102.29, 94.98, 88.48, 82.68, 77.49, 72.83, 68.62,
                64.8, 61.34, 58.18]

    # Путь снаряда в м
    LsnArr = [0, 0, 0, 0, 0, 0, 0.01, 0.01, 0.02, 0.03, 0.04, 0.06, 0.08, 0.1, 0.13, 0.17, 0.21, 0.26, 0.31, 0.38, 0.44,
              0.52, 0.61, 0.7, 0.8, 0.9, 1.01, 1.13, 1.25, 1.38, 1.51, 1.65, 1.79, 1.93, 2.08, 2.23, 2.38, 2.53, 2.69,
              2.85, 3.01, 3.17, 3.33, 3.5]

    # Скорость снаряда в м/с
    VsnArr = [0.0, 0.0, 0.0, 2.99, 7.47, 12.91, 19.48, 27.4, 36.87, 48.12, 61.36, 76.77, 94.49, 114.58, 137.04, 161.73,
              188.45, 216.91, 246.77, 277.65, 309.17, 341.0, 372.81, 404.21, 433.85, 461.27, 486.43, 509.46, 530.51,
              549.73, 567.31, 583.42, 598.2, 611.79, 624.34, 635.97, 646.79, 656.88, 666.33, 675.19, 683.53, 691.4,
              698.84, 705.89]

    # Температура газа в Кельвинах
    UgArr = [2400, 2502.27, 2578.45, 2637.31, 2682.34, 2716.19, 2740.8, 2757.63, 2767.73, 2771.91, 2770.79, 2764.87,
             2754.62, 2740.48, 2722.91, 2702.44, 2679.6, 2654.96, 2629.07, 2602.46, 2575.59, 2548.86, 2522.58, 2490.81,
             2450.22, 2409.03, 2368.13, 2327.86, 2288.45, 2250.05, 2212.74, 2176.57, 2141.56, 2107.86, 2076.31, 2046.49,
             2018.27, 1991.5, 1966.08, 1941.89, 1918.84, 1896.83, 1875.79, 1855.65]

    # **********************************************

    # Расчёт

    # **********************************************

    UmediumOsn, Noch, Nvst, UrNagreva = ThermalStateEgorov(Regim, d, Dnar, Ddul, Lkam, Lsech, Lsn, W0, Nnar, Anar, Tnar,
                                                           Hvp, p0, Tgor, f, Kovolum, Teta, Omega, Fi1, Qsn, CronoArr,
                                                           PballArr, LsnArr, VsnArr, UgArr, AlphaExt=AlphaExt, Nh=Nh,
                                                           hmin=hmin, Kvp=Kvp, Kosn=Kosn, Kposl=Kposl, Kpausa=Kpausa,
                                                           Kpereryv=Kpereryv)

    print(UrNagreva)
    print('Число очередей', Noch)
    print('Число выстрелов', Nvst)
    print('Средняя за время выстрела температура поверхностного слоя для огневого режима', UmediumOsn)
    if 'ПЕРЕГРЕВ' in UrNagreva:
        return -1, -1

    all_time = 0

    for item in Regim:
        if item['Тип'] == 'Очередь':
            all_time += item['Выстрелов'] * 60 / item['Темп']
        if item['Тип'] == 'Перерыв':
            all_time += item['Время']
    return all_time, UrNagreva




